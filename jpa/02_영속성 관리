이 장에서는 매핑한 엔티티를 엔티티 매니저를 통해 어떻게 사용하는지 알아보자.

- 엔티티 매니저는 엔티티의 저장, 수정, 삭제, 조회 등의 일을 처리한다.
- 개발자 입장에서 엔티티 매니저는 엔티티를 저장하는 가상의 데이터베이스로 생각하면 된다.

## 3.1 엔티티 매니저 팩토리와 엔티티 매니저

---

데이터베이스를 하나만 사용하는 애플리케이션은 일반적으로 EntityManagerFactory를 하나만 생성한다.

```java
// 공장 만들기, 비용이 아주 많이 든다. -> 하나만 만들어 전체에서 공유하도록 설계
EntityManagerFactory emf =
		Persistence.createEntityManagerFactory("jpabook");

// META_INF/persistence.xml에 있는 정보를 바탕으로 EntityManagerFactory 생성

// 공장에서 엔티티 매니저 생성, 비용이 거의 안 든다.
EntityManager em = emf.createEntityManager();
```

**엔티티 매니저 팩토리는 여러 스레드가 동시에 접근해도 안전하므로 서로 다른 스레드 간에 공유해도 되지만, 엔티티 매니저는 여러 스레드가 동시에 접근하면 동시성 문제가 발생하므로 스레드 간에 절대 공유하면 안 된다.**

엔티티 매니저는 데이터베이스 연결이 꼭 필요한 시점까지 커넥션을 얻지 않는다. 예를 들어 트랜잭션을 시작할 때 커넥션을 획득한다.

## 3.2 영속성 컨텍스트란?

---

JPA를 이해하는 데 가장 중요한 용어는 **영속성 컨텍스트(persistence context)**다.

- 엔티티를 영구 저장하는 환경
- 엔티티 매니저로 엔티티를 저장, 조회하면 엔티티 매니저는 영속성 컨텍스트에 엔티티를 보관하고 관리한다.

```java
em.persist(member);
```

지금까지는 위 코드를 단순히 회원 엔티티 저장이라고 표현했다. 정확히 얘기하자면 persist() 메서드는 **엔티티 매니저를 사용해서 회원 엔티티를 영속성 컨텍스트에 저장**한다.

영속성 컨텍스트는

- 논리적인 개념에 가까우며 눈에 보이지 않는다.
- 엔티티 매니저를 생성할 때 하나 만들어진다.
- 엔티티 매니저를 통해 영속성 컨텍스트에 접근할 수 있고, 영속성 컨텍스트를 관리할 수 있다.

> 여러 엔티티 매니저가 같은 영속성 컨텍스트에 접근할 수도 있지만 지금은 하나의 엔티티 매니저에 하나의 영속성 컨텍스트가 만들어진다고 생각하자. (11장에 추후 설명)
> 

## 3.3 엔티티의 생명주기

---

엔티티에는 4가지 상태가 존재한다.

- 비영속(new/transient): 영속성 컨텍스트와 전혀 관계가 없는 상태
- 영속(managed): 영속성 컨텍스트에 저장된 상태
- 준영속(detached): 영속성 컨텍스트에 저장되었다가 분리된 상태
- 삭제(removed): 삭제된 상태

**비영속**

- 새로운 엔티티 생성했을 때, 순수한 객체 상태이며 저장하지 않은 상태
- 따라서 영속성 컨텍스트나 데이터베이스와는 전혀 관련이 없다.

```java
// 객체를 생성한 상태 (비영속) - em.persist() 호출 전, 비영속 상태
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");
```

**영속**

- 엔티티가 영속성 컨텍스트에 의해 관리되고 있는 상태

```java
// 객체를 저장한 상태 (영속) - em.persist() 호출 후, 영속 상태
em.persist(member);
```

**준영속**

- 영속 상태이던 엔티티를 영속성 컨텍스트가 관리하지 않는 상태
- 특정 엔티티를 준영속 상태로 만들기 위해서는 em.detach()를 호출한다.
- em.close()를 호출하여 영속성 컨텍스트를 닫거나 em.clear()를 호출하여 영속성 컨텍스트를 초기화해도 영속성 컨텍스트가 관리하던 영속 상태의 엔티티는 준영속 상태가 된다

```java
// 회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태
em.detach(member);
```

**삭제**

- 엔티티를 영속성 컨텍스트와 데이터베이스에서 삭제

```java
// 객체를 삭제한 상태 (삭제)
em.remove(member);
```

## 4. 영속성 컨텍스트의 특징

---

**영속성 컨텍스트와 식별자 값**

영속성 컨텍스트는 엔티티를 식별자 값(@Id로 테이블의 기본 키와 매핑한 값)으로 구분한다. **따라서 영속 상태는 식별자 값이 반드시 있어야 한다.** 식별자 값이 없으면 예외가 발생한다.

**영속성 컨텍스트와 데이터베이스 저장**

영속성 컨텍스트에 엔티티를 저장하면 이 엔티티는 언제 데이터베이스에 저장될까?

JPA는 보통 트랜잭션을 커밋하는 순간 영속성 컨텍스트에 새로 저장된 엔티티를 데이터베이스에 반영하는데 이것을 **플러시(flush)**라 한다.

**영속성 컨텍스트가 엔티티를 관리하면 다음과 같은 장점이 있다.**

- 1차 캐시
- 동일성 보장
- 트랜잭션을 지원하는 쓰기 지연
- 변경 감지
- 지연 로딩

### 1. 엔티티 조회

영속성 컨텍스트는 내부에 캐시를 가지고 있는데 이것을 **1차 캐시**라 한다.

영속 상태의 엔티티는 모두 이곳에 저장된다.

→ 영속성 컨텍스트 내부에 Map이 하나 있는데 키는 @Id로 매핑한 식별자고 값은 엔티티 인스턴스다.

em.find()를 호출하면 먼저 1차 캐시에서 엔티티를 찾고 만약 찾는 엔티티가 1차 캐시에 없으면 데이터베이스에서 조회한다.

**1차 캐시에서 조회**

em.find()를 호출했을 때 만약 찾는 엔티티가 1차 캐시에 있으면 데이터베이스를 조회하지 않고 메모리에 있는 1차 캐시에서 엔티티를 조회한다.

```java
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");

// 1차 캐시에 저장됨
em.persist(member);

// 1차 캐시에서 조회
Member findMember = em.find(Member.class, "member1");
```

**데이터베이스에서 조회**

1. em.find(Member.class, "member2")를 실행한다.
2. member2가 1차 캐시에 없으므로 데이터베이스에서 조회한다.
3. 조회한 데이터로 member2 엔티티를 생성해서 1차 캐시에 저장한다. (영속 상태)
4. 조회한 엔티티를 반환한다.

**영속 엔티티의 동일성 보장**

```java
Member a = em.find(Member.class, "member1");
Member b = em.find(Member.class, "member1");

System.out.println(a == b); // 동일성 비교 (true)
```

em.find를 반복해서 호출해도 영속성 컨텍스트는 1차 캐시에 있는 같은 엔티티 인스턴스를 반환한다.

→ 영속성 컨텍스트는 성능상 이점과 엔티티의 동일성을 보장한다.

### 2. 엔티티 등록

```java
EntityManager em = emf.createEntityManager();
EntityTranscation transaction = em.getTransaction();

// 엔티티 매니저는 데이터 변경 시 트랜잭션을 시작해야 한다.
transaction.begin(); // [트랜잭션] 시작

em.persist(memberA);
em.persist(memberB);
// 여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.

// 커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.
transaction.commit(); // [트랜잭션] 커밋
```

엔티티 매니저는 트랜잭션을 커밋하기 직전까지 데이터베이스에 엔티티를 저장하지 않고 내부 쿼리 저장소에 INSERT SQL을 차곡차곡 모아둔다. 트랜잭션을 커밋할 때 모아둔 쿼리를 데이터베이스에 보내는데 이것을 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)라 한다.

트랜잭션을 커밋하면 엔티티 매니저는 우선 영속성 컨텍스트를 플러시한다. 플러시는 영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화하는 작업인데 이때 등록, 수정, 삭제한 엔티티를 데이터베이스에 반영한다. (구체적으로 이야기하면 쓰기 지연 SQL 저장소에 모인 쿼리를 데이터베이스에 보낸다.) 이렇게 영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화한 후에 실제 데이터베이스 트랜잭션을 커밋한다.

**트랜잭션을 지원하는 쓰기 지연이 가능한 이유**

다음 로직을 2가지 경우로 생각해보자.

```java
begin(); // [트랜잭션] 시작

save(A);
save(B);
save(C);

commit(); // [트랜잭션] 커밋
```

1. 데이터를 저장하는 즉시 등록 쿼리를 데이터베이스에 보낸다. 예제에서 save() 메서드를 호출할 때마다 즉시 데이터베이스에 등록 쿼리를 보낸다. 그리고 마지막에 트랜잭션을 커밋한다.
2. 데이터를 저장하면 등록 쿼리를 데이터베이스에 보내지 않고 메모리에 모아둔다. 그리고 트랜잭션을 커밋할 때 모아둔 등록 쿼리를 데이터베이스에 보낸 후에 커밋한다.

트랜잭션 범위 안에서 실행되므로 둘의 결과는 같다. 그때 그때 데이터베이스에 전달해도 트랜잭션을 커밋하지 않으면 아무 소용이 없다. 어떻게든 커밋 직전에만 데이터베이스에 SQL을 전달하면 된다. 이것이 트랜잭션을 지원하는 쓰기 지연이 가능한 이유다.

이 기능을 잘 활용하면 모아둔 등록 쿼리를 데이터베이스에 한 번에 전달해서 성능을 최적화할 수 있다.

### 3. 엔티티 수정

**SQL 수정 쿼리의 문제점**

(SQL 중심 개발) 수정 쿼리가 많아지는 것은 물론이고 비즈니스 로직을 분석하기 위해 SQL을 계속 확인해야 한다. 결국 직접적이든 간접적이든 비즈니스 로직이 SQL에 의존하게 된다.

**변경 감지**

```java
EntityManager em = emf.createEntityManager();
EntityTranscation transaction = em.getTransaction();
transaction.begin(); // [트랜잭션] 시작

// 영속 엔티티 조회
Member memberA = em.find(Member.class, "memberA");

// 영속 엔티티 데이터 수정
memberA.setUsername("hi");
memberA.setAge(10);

// em.update(member) 이런 코드가 있어야 하지 않을까?

transaction.commit(); // [트랜잭션] 커밋
```

JPA로 엔티티를 수정할 때는 단순히 엔티티를 조회해서 데이터만 변경하면 된다.

이렇게 엔티티의 변경사항을 데이터베이스에 자동으로 반영하는 기능을 **변경 감지**(dirty checking)라 한다.

JPA는 엔티티를 영속성 컨텍스트에 보관할 때, 최초 상태를 복사해서 저장해두는데 이것을 **스냅샷**이라 한다. 그리고 플러시 시점에 스냅샷과 엔티티를 비교해서 변경된 엔티티를 찾는다.

1. 트랜잭션을 커밋하면 엔티티 매니저 내부에서 먼저 플러시(flush())가 호출된다.
2. 엔티티와 스냅샷을 비교하여 변경된 엔티티를 찾는다.
3. 변경된 엔티티가 있으면 수정 쿼리를 생성하여 쓰기 지연 SQL 저장소에 보낸다.
4. 쓰기 지연 저장소의 SQL을 데이터베이스에 보낸다.
5. 데이터베이스 트랜잭션을 커밋한다.

- **변경 감지는 영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용된다.**
- 비영속, 준영속처럼 영속성 컨텍스트의 관리를 받지 못하는 엔티티 → 값을 변경해도 데이터베이스에 반영 X

**변경 감지로 인해 실행된 UPDATE SQL은 변경된 부분만이 아니라 엔티티의 모든 필드를 업데이트한다.**

이렇게 모든 필드를 사용하면 데이터베이스에 보내는 데이터 전송량이 증가하는 단점이 있지만, 다음과 같은 장점으로 인해 모든 필드를 업데이트한다.

- 모든 필드를 업데이트하면 수정 쿼리가 항상 같다. 따라서 애플리케이션 로딩 시점에 수정 쿼리를 미리 생성해두고 재사용할 수 있다.
- 데이터베이스에 동일한 쿼리를 보내면 데이터베이스는 이전에 한 번 파싱된 쿼리를 재사용할 수 있다.

필드가 많거나 저장되는 내용이 너무 크면 수정된 데이터만 사용해서 동적으로 UPDATE SQL을 생성하는 전략을 선택한다. (하이버네이트 확장 기능 사용)

```java
@Entity
@org.hibernate.annotations.DynamicUpdate
@Table(name = "Member")
public class Member {...}
```

@org.hibernate.annotations.DynamicUpdate 어노테이션을 사용하면 수정된 데이터만 사용하여 동적으로 UPDATE SQL을 생성한다.

+) 데이터를 저장할 때 데이터가 존재하는(null이 아닌) 필드만으로 INSERT SQL을 동적으로 생성하는 @DynamicInsert도 있다.

### 4. 엔티티 삭제

엔티티 삭제를 위해서는 먼저 삭제 대상 엔티티를 조회해야 한다.

```java
Member memberA = em.find(Member.class, "memberA"); // 삭제 대상 엔티티 조회
em.remove(memberA); // 엔티티 삭제
```

em.remove() → 삭제 쿼리를 쓰기 지연 SQL 저장소에 등록 → 트랜잭션을 커밋하여 플러시를 호출하면 실제 데이터베이스에 삭제 쿼리 전달

em.remove(memberA)를 호출하는 순간 memberA는 영속성 컨텍스트에서 제거된다. 이렇게 삭제된 엔티티는 재사용하지 말고 자연스럽게 가비지 컬렉션의 대상이 되도록 두는 것이 좋다.

## 3.5 플러시

---

**플러시(flush())는 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영한다.**

플러시를 실행하면 다음과 같은 일이 일어난다.

1. 변경 감지가 동작해서 영속성 컨텍스트에 있는 모든 엔티티를 스냅샷과 비교해서 수정된 엔티티를 찾는다. 수정된 엔티티는 수정 쿼리를 만들어 쓰기 지연 SQL 저장소에 등록한다.
2. 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송한다. (등록, 수정, 삭제 쿼리)

영속성 컨텍스트를 플러시 하는 3가지 방법

1. em.flush() 직접 호출
2. 트랜잭션 커밋 시 플러시 자동 호출
3. JPQL 쿼리 실행 시 플러시 자동 호출

**직접 호출**

엔티티 매니저의 flush() 메서드를 직접 호출한다. 

- 테스트나 다른 프레임워크와 JPA를 함께 사용할 때를 제외하고 거의 사용 X

**트랜잭션 커밋 시 플러시 자동 호출**

데이터베이스에 변경 내용을 SQL로 전달하지 않고 트랜잭션만 커밋하면 어떤 데이터도 데이터베이스에 반영되지 않는다. 따라서 트랜잭션을 커밋하기 전에 꼭 플러시를 호출해서 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영해야 한다. JPA는 이런 문제를 예방하기 위해 트랜잭션을 커밋할 때 플러시를 자동으로 호출한다.

**JPQL 쿼리 실행 시 플러시 자동 호출**

JPQL이나 Criteria(10장에서 설명) 같은 객체지향 쿼리를 호출할 때도 플러시가 실행된다.

```java
em.persist(memberA);
em.persist(memberB);
em.persist(memberC);

// 중간에 JPQL 실행
query = em.createQuery("select m from Member m", Member.class);
List<Member> members = query.getResultList();
```

memberA, memberB, memberC는 영속성 컨텍스트에는 있지만 아직 데이터베이스에는 반영되지 않은 상태이다.

쿼리를 실행하기 직전에 영속성 컨텍스트를 플러시하여 변경 내용을 데이터베이스에 반영해야 한다.

참고로 식별자를 기준으로 조회하는 find() 메서드를 호출할 때는 플러시가 실행되지 않는다.

### 1. 플러시 모드 옵션

엔티티 매니저에 플러시 모드를 직접 지정하려면 javax.persistence.FlushModeType을 사용한다.

- FlushModeType.AUTO: 커밋이나 쿼리를 실행할 때 플러시(기본값)
- FlushModeType.COMMIT: 커밋할 때만 플러시

(COMMIT 모드는 성능 최적화를 위해 사용할 수 있는데 자세한 내용은 10.6절에서 다룬다)

```java
em.setFlushMode(FlushModeType.COMMIT) // 플러시 모드 직접 설정
```

> **플러시라는 이름으로 인해 영속성 컨텍스트에 보관된 엔티티를 지운다고 생각하면 안 된다.
영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화하는 것이 플러시다.**
> 

## 3.6 준영속

---

영속성 컨텍스트가 관리하는 영속 상태의 엔티티가 영속성 컨텍스트에서 분리된(detached) 것을 준영속 상태라 한다. 따라서 **준영속 상태의 엔티티는 영속성 컨텍스트가 제공하는 기능을 사용할 수 없다.**

영속 상태의 엔티티를 준영속 상태로 만드는 방법은 크게 3가지다.

1. em.detach(entity) : 특정 엔티티만 준영속 상태로 전환한다.
2. em.clear() : 영속성 컨텍스트를 완전히 초기화한다.
3. em.close() : 영속성 컨텍스트를 종료한다.

### 1. 엔티티를 준영속 상태로 전환 : detach()

```java
// 특정 엔티티를 준영속 상태로 만든다.
public void detach(Object entity);

public void testDetached() {
		...
		// 회원 엔티티 생성, 비영속 상태
		Member member = new Member();
		member.setId("memberA");
		member.setUsername("회원A");

		// 회원 엔티티 영속 상태
		em.persist(member);

		// 회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태
		em.detach(member);

		transaction.commit(); // 트랜잭션 커밋
}
```

em.detach() 메서드는 영속성 컨텍스트가 더 이상 해당 엔티티를 관리하지 않도록 한다. 이 메서드를 호출하는 순간 1차 캐시부터 쓰기 지연 SQL 저장소까지 해당 엔티티를 관리하기 위한 모든 정보가 제거된다.

영속 상태가 영속성 컨텍스트로부터 관리(managed)되는 상태라면 **준영속 상태는 영속성 컨텍스트로부터 분리(detached)된 상태다.**

### 2. 영속성 컨텍스트 초기화 : clear()

em.detach()가 특정 엔티티 하나를 준영속 상태로 만들었다면 em.clear()는 영속성 컨텍스트를 초기화해서 해당 영속성 컨텍스트의 모든 엔티티를 준영속 상태로 만든다.

```java
// 엔티티 조회, 영속 상태
Member member = em.find(Member.class, "memberA");

em.clear(); // 영속성 컨텍스트 초기화

// 준영속 상태
member.setUsername("changeName");
```

준영속 상태이므로 영속성 컨텍스트가 지원하는 변경 감지는 동작하지 않는다. 따라서 회원의 이름을 변경해도 데이터베이스에 반영되지 않는다.

### 3. 영속성 컨텍스트 종료: close()

영속성 컨텍스트를 종료하면 해당 영속성 컨텍스트가 관리하던 영속 상태의 엔티티가 모두 준영속 상태가 된다.

```java
public void closeEntityManager() {

		EntityManagerFactory emf =
				Persistence.createEntityManagerFactory("jpabook");

		EntityManager em = emf.createEntityManager();
		EntityTranscation transaction = em.getTransaction();

		transaction.begin(); // [트랜잭션] - 시작

		Member memberA = em.find(Member.class, "memberA");
		Member memberB = em.find(Member.class, "memberB");

		transaction.commit(); // [트랜잭션] - 커밋

		em.close(); // 영속성 컨텍스트 닫기(종료)
}
```

### 4. 준영속 상태의 특징

**거의 비영속 상태에 가깝다**

영속성 컨텍스트가 관리하지 않으므로 1차 캐시, 쓰기 지연, 변경 감지, 지연 로딩을 포함한 영속성 컨텍스트가 제공하는 어떠한 기능도 동작하지 않는다.

**식별자 값을 가지고 있다.**

비영속 상태는 식별자 값이 없을 수도 있지만 준영속 상태는 이미 한 번 영속 상태였으므로 반드시 식별자 값을 가지고 있다.

**지연 로딩을 할 수 없다.**

지연 로딩(LAZY LOADING)은 실제 객체 대신 프록시 객체를 로딩해두고 해당 객체를 실제 사용할 때 영속성 컨텍스트를 통해 데이터를 불러오는 방법이다. 하지만 준영속 상태는 영속성 컨텍스트가 더는 관리하지 않으므로 지연 로딩 시 문제가 발생한다. (지연 로딩에 대한 자세한 내용은 8장)

### 병합: merge()

- 준영속 상태의 엔티티를 다시 영속 상태로 변경할 때 사용

merge() 메서드는 준영속 상태의 엔티티를 받아서 그 정보로 새로운 영속 상태의 엔티티를 반환한다.

```java
public <T> T merge(T entity);

Member mergeMember = em.merge(member);
```

병합은 파라미터로 넘어온 엔티티의 식별자 값으로 영속성 컨텍스트를 조회하고 찾는 엔티티가 없으면 데이터베이스에서 조회한다. 만약 데이터베이스에서도 발견하지 못하면 새로운 엔티티를 생성해서 병합한다.

병합은 준영속, 비영속을 신경 쓰지 않는다. 식별자 값으로 엔티티를 조회할 수 있으면 불러서 병합하고 조회할 수 없으면 새로 생성해서 병합한다. 따라서 병합은 save or update 기능을 수행한다.

## 3.7 정리

---

- 엔티티 매니저는 엔티티 매니저 팩토리에서 생성한다. 엔티티 매니저를 만들면 그 내부에 영속성 컨텍스트도 함께 만들어진다. 영속성 컨텍스트는 엔티티 매니저를 통해 접근할 수 있다.
- 영속성 컨텍스트는 애플리케이션과 데이터베이스 사이에서 객체를 보관하는 가상의 데이터베이스 같은 역할을 한다. 영속성 컨텍스트 덕분에 1차 캐시, 동일성 보장, 트랜잭션을 지원하는 쓰기 지연, 변경 감지, 지연 로딩 기능을 사용할 수 있다.
- 영속성 컨텍스트에 저장한 엔티티는 플러시 시점에 데이터베이스에 반영되는데 일반적으로 트랜잭션을 커밋할 때 영속성 컨텍스트가 플러시된다.
- 영속성 컨텍스트가 관리하는 엔티티(영속 상태), 더 이상 관리하지 못하면(준영속 상태). 준영속 상태에서는 1차 캐시, 동일성 보장, 트랜잭션을 지원하는 쓰기 지연, 변경 감지, 지연 로딩 같은 기능들을 사용할 수 없다.
